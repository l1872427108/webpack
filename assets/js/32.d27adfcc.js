(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{430:function(v,_,e){"use strict";e.r(_);var p=e(56),t=Object(p.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"代码利用率"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码利用率"}},[v._v("#")]),v._v(" 代码利用率")]),v._v(" "),e("p",[v._v("webpack 打包之后，可以借助工具，进行一定的分析.")]),v._v(" "),e("p",[v._v("第一次打包就是最快的")]),v._v(" "),e("p",[v._v("webpack 真正希望我们怎么样")]),v._v(" "),e("p",[v._v("代码的使用率")]),v._v(" "),e("p",[v._v("真正异步的代码才能让你的代码起飞")]),v._v(" "),e("p",[v._v("async 这就是为什么 webpack 默认只是分割 异步代码。")]),v._v(" "),e("p",[v._v("登录框的代码不应该就不需要了。")]),v._v(" "),e("p",[v._v("如果到时候点击的时候时候才去加载会不会很慢呀？\n是的，所以我们需要借助两个东西。\npreloading 和 prefetching")]),v._v(" "),e("p",[v._v("访问的时候不需要加载。 加载完之后页面被加载完。 空闲下来的时候\n去偷偷的加载下来登录的代码。")]),v._v(" "),e("p",[v._v("异步组件。 懒加载的形式。")]),v._v(" "),e("p",[v._v("prefetching 会等待空闲下来才去加载异步文件。")]),v._v(" "),e("p",[v._v("preloading 会与核心代码一同去加载异步文件。")]),v._v(" "),e("p",[v._v("空闲下来再去加载异步文件")]),v._v(" "),e("p",[v._v("这样子浏览器会缓存下来，\n到了真正执行的时候，我们就可以去缓存中加载文件， 耗时就不可以了。")]),v._v(" "),e("p",[v._v("prefetch 可能会有一定的兼容性问题\n懒加载 可以会牺牲一定的用户体验。 但是配合 prefetch 就可以很好的解决。")]),v._v(" "),e("p",[v._v("我们要重视代码覆盖率，而不是缓存。")])])}),[],!1,null,null,null);_.default=t.exports}}]);