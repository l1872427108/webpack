(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{422:function(t,n,e){"use strict";e.r(n);var a=e(56),v=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"利用缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#利用缓存"}},[t._v("#")]),t._v(" 利用缓存")]),t._v(" "),e("p",[t._v("我们打包好的文件， 部署到上线，是会被缓存的。")]),t._v(" "),e("p",[t._v("即使我们做了修改, 也会进行一个缓存的。")]),t._v(" "),e("p",[t._v("我们可以 将输出的文件，\n库文件 我们是不会更改的，我们是需要做一个缓存的。")]),t._v(" "),e("p",[t._v("逻辑代码，我们也需要缓存，但是我们修改之后，就不会要缓存了。")]),t._v(" "),e("p",[t._v("我们就需要去服务器获取最新的逻辑代码。")]),t._v(" "),e("p",[t._v("我们可以利用  [contenthash]  来进行缓存。")]),t._v(" "),e("p",[t._v("这样子，我们就可以将代码缓存下来了。")]),t._v(" "),e("p",[t._v("代码更改后，就回去或取最新的代码")]),t._v(" "),e("h1",{attrs:{id:"主意"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主意"}},[t._v("#")]),t._v(" 主意：")]),t._v(" "),e("p",[t._v("旧版本的 webpack")]),t._v(" "),e("p",[t._v("// 兼容旧版本\n// 业务逻辑和库 的关联逻辑的代码  manifest 默认是存在与业务和库,\n// 旧版本可能因为 manifest 内置的之间的内容可能发生变化\n// runtime 就会抽离出来，放的就是关系的代码\nruntimeChunk: {\nname: 'runtime'\n},")])])}),[],!1,null,null,null);n.default=v.exports}}]);