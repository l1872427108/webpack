(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{406:function(s,t,e){"use strict";e.r(t);var n=e(56),a=Object(n.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"css-分割"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-分割"}},[s._v("#")]),s._v(" css 分割")]),s._v(" "),e("p",[s._v("css 会被 style-loader 注入到 js")]),s._v(" "),e("p",[s._v("所以我们要使用 mini-css-extract-plugin 插件自带的 loader 进行单独的打包")]),s._v(" "),e("p",[s._v("主意 tree shaking 可能会给摇晃掉 。 [*.css]")]),s._v(" "),e("p",[s._v("new MiniCssExtractPlugin()\n同一个入口下的 css 会被打包到一起。 但是不会进行代码压缩和合并。")]),s._v(" "),e("p",[s._v("我们需要借助另一个插件 OptimizeCssAssetsWebpackPlugin\n它的底层也是借助 splitChunk 整个插件的。\n所以我们可以对 css 的打包过程进行自定义的分割。")])])}),[],!1,null,null,null);t.default=a.exports}}]);