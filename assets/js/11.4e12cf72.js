(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{409:function(e,r,v){"use strict";v.r(r);var t=v(56),a=Object(t.a)({},(function(){var e=this,r=e.$createElement,v=e._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"devserver"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#devserver"}},[e._v("#")]),e._v(" DevServer")]),e._v(" "),v("p",[e._v("DevServer 会启动一个 HTTP 服务器用于服务网页请求，同是帮助启动 webpack，并接受 webpack 发出的文件更变信号，通过 webSocket 协议自动刷新网页做到实施预览。")]),e._v(" "),v("p",[e._v("DevServer 会把 webpack 构建出的文件保存在内存当中，在要访问输出的文件时，必须通过 HTTP 服务访问，DevServer 会忽视 output.path ，所以要获取到启动的服务下的 bundle.js.")]),e._v(" "),v("p",[e._v("webpack 在启动时可以开启监听模式，webpack 会去监听本地文件系统的变化，发生变化时重新构建出新的结果。 webpack 默认是关闭监听的，可以在启动 webpack 时 webpack --watch 开开启监听。")]),e._v(" "),v("p",[e._v("通过 DevServer 启动的 Webpack 会开启监听模式，当发生变化时重新执行完构建后通知 DevServer。DevServer 会让 webapck 在构建出的 js 代码里注入一个代理客户端用户控制网页，网页和DevServer之间通过 webSocket 协议通信，以方便 DevServer 主动向客户端发送命令。DevServer 收到来自 Webpack 的文件变化通知时注入的客户端控制网页刷新。只有 entry 本身和依赖的文件才会被 webpack 添加到监听列表里面。")]),e._v(" "),v("p",[e._v("DevServer 还有一种模块热替换的刷新技术。不刷新整个网页的情况下，通过将被更新过的模块替换老的模块，在重新执行一次来实现实时预览。默认是关闭的。需要设置 --hot 参数。")])])}),[],!1,null,null,null);r.default=a.exports}}]);